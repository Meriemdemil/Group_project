Course 
 « Computer Vision » 
 Sid - Ahmed Berrani 
 2024 - 2025 
 1 
 VI . 
 Line / curve boundary detection 
 Basically : 
 We have a set of edges in an image = > fit a line , a circle or any geometrical shape . 
 Fitting is the process to decompose an image or a set of tokens ( i.e. pixels , isolated points , 
 sets of edge points ... ) into components that belong to circles , lines or any other shape . 
 A line 
 A circle 
 2 
 VI . 
 Line / curve boundary detection 
 Edge post - processing 
 3 
 VI . Line / curve boundary detection 
 What is it used for ? 
 • Image segmentation : produce compact representations that emphasize the relevant image structures . 
 • Image understanding . 
 • Analyzing and measuring man made objects ( e.g. as part of quality insurance process ) . 
 4 
 VI . Line / curve boundary detection 
  Fitting involves determining what possible curves could have given rise to a set 
 of tokens observed in an image . 
 5 
 VI . Line / curve boundary detection 
 Fitting involves determining what possible curves could have given rise to a set of 
 tokens observed in an image . 
  Many sub - problems : 
 1 . Parameter estimation : if we already 
 know the association between tokens and 
 curves . We need to recover the parameters 
 of each curve . 
 6 
 VI . Line / curve boundary detection 
 Fitting involves determining what possible curves could have given rise to a set of 
 tokens observed in an image . 
 we assume to 
 know only how many curves are present but 
 not which token came from which curve . 
 The association must be solved together 
 with parameter estimation . 
 7 
 VI . Line / curve boundary detection 
 Fitting involves determining what possible curves could have given rise to a set of 
 tokens observed in an image . 
  Many sub - problems : 
 we have no prior knowledge on the 
 data , so we must figure out : 
 ( i ) How many curves are present , 
 ( ii ) The association between tokens and curves , 
 ( iii ) Curve parameters . 
 8 
 VI . Line / curve boundary detection 
 Parameter estimation : 
 • We have observed a set of points generated by a certain curve model with unknown 
 parameters . 
 Goal : Find the best set of parameters that justify the observations . 
 Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 Edges : points 𝑥 , 𝑦 
 𝑖 𝑖 
 10 
 VI . 
 Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 Edges : points 𝑥 , 𝑦 
 𝑦 = 𝑚𝑥 + 𝑐 
 𝑖 𝑖 
 Goal : find 𝑚 and 𝑐. 
 11 
 VI . 
 Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 Edges : points 𝑥 , 𝑦 
 𝑖 𝑖 
 Goal : find 𝑚 and 𝑐. 
 The idea : 
 Minimize average squared vertical distances . 
 1 
 𝐸 = σ 𝑦 − 𝑚𝑥 − 𝑐 2 
 𝑖 𝑖 𝑖 
 𝑁 
 The solution : least square method 
 𝝏𝑬 −2 𝝏𝑬 −2 
 = σ 𝑥 𝑦 − 𝑚𝑥 − 𝑐 = σ 𝑦 − 𝑚𝑥 − 𝑐 
 𝑖 𝑖 𝑖 𝑖 𝑖 𝑖 𝑖 
 𝝏𝒎 𝑁 𝝏𝒄 𝑁 
 12 
 VI . Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 The idea : 
 Minimize average squared vertical distances . 
 1 
 𝐸 = σ 𝑦 − 𝑚𝑥 − 𝑐 2 
 𝑖 𝑖 𝑖 
 𝑁 
 The solution : least square method 
 𝝏𝑬 −2 
 = σ 𝑥 𝑦 − 𝑚𝑥 − 𝑐 
 𝑖 𝑖 𝑖 𝑖 
 𝝏𝒎 𝑁 
 𝝏𝑬 −2 
 = σ 𝑦 − 𝑚𝑥 − 𝑐 
 𝑖 𝑖 𝑖 
 𝝏𝒄 𝑁 
 σ 𝑥 −𝑥ҧ 𝑦 −𝑦ത 
 𝑚 = 𝑖 𝑖 𝑖 𝑐 = 𝑦ത − 𝑚𝑥ҧ 
 σ 𝑥 −𝑥ҧ 2 
 𝑖 𝑖 
 1 1 
 Where 𝑥ҧ = σ 𝑥 𝑦ത = σ 𝑦 13 
 𝑖 𝑖 𝑖 𝑖 
 𝑁 𝑁 
 VI . Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 The idea : 
 Minimize average squared vertical distances . 
 1 
 𝐸 = σ 𝑦 − 𝑚𝑥 − 𝑐 2 
 𝑖 𝑖 𝑖 
 𝑁 
 The solution : least square method 
 The problem : 
 Vertical lines . 
 14 
 VI . Line / curve boundary detection 
 Let ’s start with fitting lines to edges … 
 The idea : 
 Minimize average squared vertical distances . 
 1 
 𝐸 = σ 𝑦 − 𝑚𝑥 − 𝑐 2 
 𝑖 𝑖 𝑖 
 𝑁 
 The solution : least square method 
 The problem : 
 Vertical lines . 
 An alternative solution : 
 Minimizing the perpendicular distance . 
 Line / curve boundary detection 
 Fitting lines to edges 
 Minimizing the perpendicular distance 
  Solution : 2D PCA 
 18 
 VI . 
 Line / curve boundary detection 
 𝑋𝑎 = 𝑦 
 𝑇 𝑇 𝑇 
 𝑋 𝑋𝑎 = 𝑋 𝑦 𝑋 𝑋 is a 𝑚 × 𝑚 square matrix 
 𝑇 −1 𝑇 𝑇 −1 𝑇 
 𝑋 𝑋 𝑋 𝑋 𝑎 = 𝑋 𝑋 𝑋 𝑦 
 𝑇 −1 𝑇 + 𝑇 −1 𝑇 
 𝑎 = 𝑋 𝑋 𝑋 𝑦 𝑋 = 𝑋 𝑋 𝑋 
 ( Pseudo inverse ) 
 24 
 VI . Line / curve boundary detection 
 The main problem with boundary detection : 
 How to know which edges in an image actually correspond to the 
 boundary we are looking for . 
 = > 
 The Hough transform 
 The Hough transform 
 Definition and goal : 
 • The Hough Transform is a feature extraction technique used in image 
 analysis , computer vision , and digital image processing . 
 • Its main goal is to detect simple geometric shapes ( such as lines , 
 circles , or ellipses ) in an image . 
 The Hough transform 
 Advantages over existing methods : 
 • Robust to noise and gaps : Unlike edge - following algorithms , the Hough Transform 
 can detect lines even if the line is partially broken or noisy . 
 • Simple mathematical formulation for complex pattern recognition tasks . 
 • Works in cluttered scenes : Efficiently finds shapes even in the presence of many 
 irrelevant edges . 
 • Detects multiple instances of the same shape in a single pass . 
 The transform 
 Applications : 
 • Lane detection in autonomous driving systems ( detecting road boundaries or lanes ) . 
 • Object recognition where objects are approximated by geometric shapes . 
 • Medical image analysis ( e.g. , detecting circular features like tumors or bones ) . 
 • Robotics for identifying structured environments . 
 • Industrial inspection to detect regular shapes in manufactured parts . 
 • Document image analysis to detect lines , text baselines , or page segmentation . 
 The transform 
 Challenges : 
 • Which data to fit to ? 
 • Only part of the model is visible : data is incomplete 
 • 
 Noise . 
 30 
 VII . The transform 
 Let ’s start with the straight line … 
 Edges : points 𝑥 , 𝑦 
 𝑖 𝑖 
 Task : detect the line y = 𝑚𝑥 + 𝑐 
 If we consider a point 𝑥 , 𝑦 : 
 𝑖 𝑖 
 𝑦 = 𝑚𝑥 + 𝑐 ⇔ c = −𝑚𝑥 + 𝑦 
 𝑖 𝑖 𝑖 𝑖 
 31 
 VII . 
 The transform 
 The principle : 
 The transform 
 Image 
 Line detection algorithm 
 1 . Quantize parameter space ( 𝑚 , 𝑐 ) 
 2 . Create an accumulator array A(𝑚 , 𝑐 ) 
 3 . Set A 𝑚 , 𝑐 = 0 for all positions in the array 
 𝐀 𝒎 , 𝒄 
 𝒎 
 𝒄 
 33 
 VII . 
 The Hough transform 
 The Hough transform 
 Image 
 Line detection algorithm 
 1 . Quantize parameter space ( 𝑚 , 𝑐 ) 
 2 . Create an accumulator array A(𝑚 , 𝑐 ) 
 3 . Set A 𝑚 , 𝑐 = 0 for all positions in the array 
 4 . 
 The Hough transform 
 Image 
 Line detection algorithm 
 1 . Quantize parameter space ( 𝑚 , 𝑐 ) 
 2 . Create an accumulator array A(𝑚 , 𝑐 ) 
 3 . Set A 𝑚 , 𝑐 = 0 for all positions in the array 
 4 . For each edge point 𝑥 , 𝑦 : 
 𝑖 𝑖 
 𝐀 𝒎 , 𝒄 
 A 𝑚 , 𝑐 + = 1 if ( 𝑚 , 𝑐 ) lies in the line c = −𝑚𝑥 + 𝑦 
 𝑖 𝑖 
 1 0 0 1 0 
 0 1 0 1 0 
 0 0 1 1 0 
 𝒎 
 1 1 1 3 1 
 0 0 0 1 1 
 0 0 0 1 0 
 𝒄 
 37 
 VII . 
 For each edge point 𝑥 , 𝑦 : 
 𝑖 𝑖 
 𝐀 𝒎 , 𝒄 
 A 𝑚 , 𝑐 + = 1 if ( 𝑚 , 𝑐 ) lies in the line c = −𝑚𝑥 + 𝑦 
 𝑖 𝑖 
 1 0 0 1 0 
 5 . 
 The transform 
 A parametrization problem 
 • The parameter 𝑚 ( the slope ) varies between −∞ and + ∞. 
 • A fine quantization = > a very large accumulator . 
 • A huge amount of memory required 
 • A very costly line detection algorithm . 
 The solution : 
 • Instead of representing the line in the cartesian domain , use a polar representation . 
 • Work on parameters 𝜃 and 𝜌 : 
 𝜋 ≥ 𝜃 ≥ 0 
 𝜌 is finite 
 41 
 VII . 
 The transform 
 The algorithm : 
 • Initialize A 𝜌 , 𝜃 = 0 
 • For each edge point 𝑝 𝑥 , 𝑦 in the image 
 𝑖 𝑖 𝑖 
 For 𝜃 = 0 to 𝜋 
 𝜌 = 𝑥 𝑐𝑜𝑠 𝜃 + 𝑦 𝑠𝑖𝑛 𝜃 
 𝑖 𝑖 
 A 𝜌 , 𝜃 + = 1 
 • Find 𝜌 , 𝜃 for which A 𝜌 , 𝜃 is maximum . 
 • The detected line is given by 𝜌 = 𝑥 𝑐𝑜𝑠 𝜃 + 𝑦 𝑠𝑖𝑛 𝜃 
 42 
 VII . 
 The transform 
 Possible extensions & optimizations 
 • Along with the edges , make use of the gradient direction 
 = > Reduces the need to iterate overall possible values of 𝜃. 
 The gradient direction at each edge point to directly infer the most likely 
 orientation of the line passing through that point . 
 The transform 
 Possible extensions & optimizations 
 • How many lines do we have ? 
 Count the peaks in the accumulator array . 
 The Hough transform 
 Application to circle detection 
 • Let ’s make the problem simpler . 
 We assume the radius 𝑟 known . 
 The transform 
 Application to circle detection 
 • Let ’s make the problem simpler . 
 We assume the radius 𝑟 known . 
 The transform 
 Application to circle detection 
 • Let ’s make the problem simpler . 
 We assume the radius 𝑟 known . 
 The Hough transform 
 Application to circle detection 
 • Let ’s make the problem simpler . 
 We assume the radius 𝑟 known . 
 The Hough transform 
 An example 
 Original image Edges Hough Transform Hough Transform 
 𝑟 = 𝑟 𝑟 = 𝑟 
 1 2 
 52 
 VII . 
 The Hough transform 
 Application to circle detection 
 • Now , if the radius 𝑟 is unknown . 
 • 
 The Hough transform 
 Application to circle detection 
 • Now , if the radius 𝑟 is unknown . 
 • 
 The accumulator array concerns parameters 𝑎 , 𝑏 and also the radius 𝑟. 
 2 2 2 
 𝒙 − 𝑎 + 𝒚 − 𝑏 = 𝑟 2 𝟐 2 
 𝑥 − 𝒂 + 𝒚 − 𝒃 = 𝒓 
 𝒊 𝒊 
 𝑖 𝒊 
 Image space 54 
 Parameter space